// script.js

// Handle the 'Yes' button click (show the second page)
document.getElementById('yesBtn').addEventListener('click', function() {
    document.getElementById('sorryPage').style.display = 'none';
    document.getElementById('secondPage').style.display = 'block';
});

// Handle the 'No' button click (make it move around the entire page)
document.getElementById('noBtn').addEventListener('click', function() {
    moveButton();
});

// Function to move the "No" button randomly around the entire page
function moveButton() {
    const btn = document.getElementById('noBtn');

    // Get the width and height of the window
    const maxX = window.innerWidth - btn.offsetWidth;
    const maxY = window.innerHeight - btn.offsetHeight;

    // Add a condition to make the button move less on small screens (optional)
    if (window.innerWidth <= 600) {
        // Limit movement on mobile devices (allow the button to move within 80% of the screen)
        maxX *= 0.8;
        maxY *= 0.8;
    }

    // Calculate random positions within the window
    const randomX = Math.random() * maxX;
    const randomY = Math.random() * maxY;

    // Update the position of the button
    btn.style.position = 'absolute';
    btn.style.left = `${randomX}px`;
    btn.style.top = `${randomY}px`;
}

// Handle the second 'Yes' button on the second page (trigger crackers burst)
document.getElementById('yesBtnSecondPage').addEventListener('click', function() {
    triggerCrackers();
});

// Function to trigger crackers burst
function triggerCrackers() {
    const container = document.getElementById('crackersContainer');

    // Create 30 crackers that burst randomly around the screen
    for (let i = 0; i < 30; i++) {
        const cracker = document.createElement('div');
        cracker.classList.add('cracker');

        // Set random position for the cracker
        cracker.style.left = `${Math.random() * window.innerWidth}px`;
        cracker.style.top = `${Math.random() * window.innerHeight}px`;

        // Append the cracker to the container
        container.appendChild(cracker);

        // Remove the cracker after animation ends
        setTimeout(() => {
            container.removeChild(cracker);
        }, 1000); // 1000ms matches the animation duration
    }
}
